Menu="Dashboard"
Icon="server"
---
<?php
require_once("/usr/local/emhttp/plugins/docker.folder/include/common.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/loadlist_edit.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/eventControl_edit.php");
?>

<script>

(async () => {
    dockerFolders = await read_folders()
    folders = await dockerFolders['folders']
    $( "<tbody id='docker_list_storage' style='display:none;'></tbody>" ).insertAfter( "#db-box3 > .docker_view" );
    activeDropdowns = [];
})();

async function apply_folder() {
    waitForGlobal("folders", async function() {
        let folderNames = Object.keys(await folders)
        folderChildren = []
        activeFolders = []
        
        for (const folderName of folderNames) {
            edit_folder_base(folderName)
            edit_folder_extra(folderName)
        }

        // dashboard expanded
        for (const folderName of folderNames) {
            if (folders[folderName]['dashboard_expanded_button']) {
                dashboard_expanded_button(folderName)
            }

            // dashboard_expanded - activeDropdowns
            if (folders[folderName]['dashboard_expanded'] && !activeDropdowns.includes(folderName)) {
                activeDropdowns.push(folderName)
            }            
        }

        // open dropdown on loadlist
        $('[class*="docker-folder-parent-"]').each(function() {
            var name = $(this).find('span.inner > span:first-child').text()
            if (activeDropdowns.includes(name) && $(this).attr('dashboard_expanded') !== 'true') {
                $(this).attr('dashboard_expanded', true)
                docker_toggle_visibility(name)
                $(`.docker-folder-parent-${name}`).children("i").toggleClass("fa-chevron-down fa-chevron-up")
                dashboard_expanded(name)
            }
        })
    })
}

function edit_folder_extra(folderName) {
    // started only fix
    if ($('#apps').prop('checked') && $(`.docker-folder-parent-${folderName}`).find("span.inner > i").hasClass('stopped')) {
        $(`.docker-folder-parent-${folderName}`).hide()
    }
}

function dashboard_expanded_button(folderName) {
    // add button
    if ($(`.docker-folder-parent-${folderName}`).children("i").length == 0) {
        
        var offset = $(`.docker-folder-parent-${folderName}`).offset()

        $(`.docker-folder-parent-${folderName}`).css('position', 'relative').prepend(`<i class="fa fa-fw fa-chevron-up"" style="position: absolute; top: 22px; left: -16px;"></i>`)
        $(`.docker-folder-parent-${folderName}`).children("i").click(function() {
            childrenDropdown(folderName)
            var selectionIndex = $(`.docker-folder-parent-${folderName}`).index()
            $('[class*="docker-folder-parent-"]').each(function() {
                var name = $(this).find('span.inner > span:first-child').text()
                var index = $(this).index()
                if (activeDropdowns.includes(name) && name !== folderName && index > selectionIndex) {
                    childrenDropdown(name)
                    childrenDropdown(name)
                }
            })
        });
    }
}

$('#apps').change(function() {
    let tmpActiveDropdowns = []
    $('[class*="docker-folder-parent-"]').each(function() {
        let name = $(this).find('span.inner > span:first-child').text()
        let stopped = $(this).find('.inner > i').hasClass('stopped')
        if (activeDropdowns.includes(name)) {
            childrenDropdown(name)
            if (!stopped) {
                tmpActiveDropdowns.push(name)
            }
        }
    })
    setTimeout(() => {
        $('[class*="docker-folder-parent-"]').each(function() {
            let name = $(this).find('span.inner > span:first-child').text()
            if (tmpActiveDropdowns.includes(name)) {
                childrenDropdown(name)
            }
        })
    }, 200);
})

function dashboard_expanded(folderName) {
    const spaces_template = `<span class="outer solid apps docker-folder-spacer-${folderName}"><span class="inner" style="margin-left: 42px;margin-bottom: 17px;"><span class=""></span><br><i class=""></i><span></span></span></span>`
    const dashboardElement = $('tbody.docker_view > tr > td:nth-child(2)')

    // main logic
    var addCountStart = 0
    var addCountEnd = 0
    var index = dashboardElement.children('span:visible').index(dashboardElement.children(`.docker-folder-parent-${folderName}`))+1
    var rows = 3

    // get rows count (should find a better way)
    let dockerViewWidth = dashboardElement.width()
    if (dockerViewWidth >= 1092) {
        rows = 6
    }else if (dockerViewWidth >= 910) {
        rows = 5
    } else if (dockerViewWidth >= 728) {
        rows = 4
    } else if (dockerViewWidth <= 545) {
        rows = 2
    }

    while (index == 0 || Number.isInteger(index/rows) == false) {
        addCountStart++
        index++
    }

    // get children count
    let childrenCount = 0
    $(`.docker-folder-child-${folderName}`).each(function() {
        if ($(this).css('display') !== 'none') {
            childrenCount++
        }
    })

    index = index+childrenCount
    while (index == 0 || Number.isInteger(index/rows) == false) {
        addCountEnd++
        index++
    }

    childrenMove(folderName)
    $(`.docker-folder-child-${folderName}`).removeClass('docker-folder-hide')

    // add spaces at start
    for (i=1; i <= addCountStart; i++) {
        $(spaces_template).insertAfter($(`.docker-folder-parent-${folderName}`))
    }

    // add spaces at end
    for (i=1; i <= addCountEnd; i++) {
        $(spaces_template).insertAfter(dashboardElement.children(`.docker-folder-child-${folderName}:visible:last`))
    }

    // add line at start
    $(`.docker-folder-child-${folderName}`).each(function(i){
        if (i < rows) {
            $(this).css('border-top', 'inset').css('margin-bottom', '16px')
        }
    })
    if (childrenCount < rows) {
        $(`.docker-folder-spacer-${folderName}`).each(function() {
            let sIndex = $(this).index()
            if (sIndex > dashboardElement.children(`.docker-folder-child-${folderName}`).index()) {
                $(this).css('border-top', 'inset').css('margin-bottom', '16px')
            }
        })
    }

    // add line at end
    if (addCountEnd === 0) {
        var lastIndex = $(`.docker-folder-child-${folderName}`).last().index()
    } else {
        var lastIndex = $(`.docker-folder-spacer-${folderName}`).last().index()
    }
    for(i=0; i < addCountEnd+rows-addCountEnd; i++) {
        $('tbody.docker_view > tr > td:nth-child(2)').children().eq(lastIndex-i).css('border-bottom', 'solid')
    }
}

function childrenDropdown(folderName) {
    docker_toggle_visibility(folderName);
    $(`.docker-folder-parent-${folderName}`).children('i').toggleClass('fa-chevron-down fa-chevron-up');

    if ($(`.docker-folder-parent-${folderName}`).children('i').hasClass('fa-chevron-up')) {
        // add to storage
        for (const folder of folders[folderName]['children'].reverse()) {
            $(`.docker-folder-child-${folderName}`).each(function() {
                if (folder == $(this).find('span.inner > span:first-child').text()) {
                    $(this).appendTo('#docker_list_storage');
                }
            });
        }
        // remove folderName from activeDropdowns
        activeDropdowns = activeDropdowns.filter(function(elm) {
            return elm != folderName;
        })
        // remove spacers
        $(`.docker-folder-spacer-${folderName}`).each(function() {
            $(this).remove();
        });
    } else {
        dashboard_expanded(folderName);
        // add folderName to activeDropdowns
        activeDropdowns.push(folderName);
    }
}

function childrenMove(folderName) {
    for (const folder of folders[folderName]['children'].reverse()) {
        $(`.docker-folder-child-${folderName}`).each(function() {
            if (folder == $(this).find('span.inner > span:first-child').text()) {
                $(this).insertAfter(`.docker-folder-parent-${folderName}`);
            }
        });
    }
}

</script>