Menu="Dashboard"
Icon="server"
---
<?php
require_once("/usr/local/emhttp/plugins/docker.folder/include/loadlist_edit.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/common.php");
?>

<script>

(async () => {
    folders = await read_folders()
    $( "<tbody id='docker_list_storage' style='display:none;'></tbody>" ).insertAfter( "#db-box3 > .docker_view" );
    activeDropdowns = [];
})();

async function apply_folder() {
    let folderNames = Object.keys(await folders)
    folderChildren = []
    
    for (const folderName of folderNames) {
        edit_folder_base(folderName)
        edit_folder_extra(folderName)
    }

    // dashboard expanded
    for (const folderName of folderNames) {
        if (folders[folderName]['dashboard_expanded_button']) {
            dashboard_expanded_button(folderName)
        }

        // dashboard_expanded - activeDropdowns
        if (folders[folderName]['dashboard_expanded'] && !activeDropdowns.includes(folderName)) {
            activeDropdowns.push(folderName)
        }

        // open dropdown on loadlist
        for (const dropdown of activeDropdowns) {
            if (dropdown == folderName) {
                docker_toggle_visibility(folderName)
                $(`.docker-folder-parent-${folderName}`).children("i").toggleClass("fa-chevron-down fa-chevron-up")
                dashboard_expanded(folderName)
            }
        }
    }
}

function edit_folder_extra(folderName) {
    // started only fix
    if ($('#apps').prop('checked') && $(`.docker-folder-parent-${folderName}`).find("span.inner > i").hasClass('stopped')) {
        $(`.docker-folder-parent-${folderName}`).hide()
    }
}

function dashboard_expanded_button(folderName) {
    // add button
    if ($(`.docker-folder-parent-${folderName}`).children("i").length == 0) {
        
        var offset = $(`.docker-folder-parent-${folderName}`).offset()

        $(`.docker-folder-parent-${folderName}`).css('position', 'relative').prepend(`<i class="fa fa-fw fa-chevron-up"" style="position: absolute; top: 22px; left: -16px;"></i>`)
        $(`.docker-folder-parent-${folderName}`).children("i").click(function() {
            childrenDropdown(folderName)
        });
    }
}

function dashboard_expanded(folderName) {
    var spaces_template = `<span class="outer solid apps docker-folder-spacer-${folderName}"><span class="inner" style="margin-left: 42px;margin-bottom: 17px;"><span class=""></span><br><i class=""></i><span></span></span></span>`
  
    // add fake index to all
    var fakeIndex = 0
    $('tbody.docker_view > tr > td:nth-child(2)').children().each(function(){
        if($(this).hasClass('docker-folder-hide') == false) {
            fakeIndex++
            $(this).attr('fake-index', fakeIndex)
        }
    })

    // main logic
    $('tbody.docker_view > tr > td:nth-child(2)').children().each(function(i){
        if ($(this).hasClass(`docker-folder-parent-${folderName}`)) {
            var addCountStart = 0
            var addCountEnd = 0
            var index = i+1

            while (index == 0 || Number.isInteger(index/3) == false) {
                addCountStart++
                index++
            }

            index = index+folders[folderName]['children'].length
            while (index == 0 || Number.isInteger(index/3) == false) {
                addCountEnd++
                index++
            }

            childrenMove(folderName)
            $(`.docker-folder-child-${folderName}`).removeClass('docker-folder-hide')

            // add spaces at start
            for (i=1; i <= addCountStart; i++) {
                $(spaces_template).insertAfter($(`.docker-folder-parent-${folderName}`))
            }

            // add spaces at end
            for (i=1; i <= addCountEnd; i++) {
                $(spaces_template).insertAfter($(`.docker-folder-child-${folderName}`).last())
            }

            // add line at start
            $(`.docker-folder-child-${folderName}`).each(function(i){
                if (i < 3) {
                    $(this).css('border-top', 'inset').css('margin-bottom', '16px')
                }
            })

            // add line at end
            var lastIndex = $(`.docker-folder-spacer-${folderName}`).last().index()
            for(i=0; i < addCountEnd+3-addCountEnd; i++) {
                $('tbody.docker_view > tr > td:nth-child(2)').children().eq(lastIndex-i).css('border-bottom', 'solid')
            }
        }
    })
}

function childrenDropdown(folderName) {
    docker_toggle_visibility(folderName);
    $(`.docker-folder-parent-${folderName}`).children('i').toggleClass('fa-chevron-down fa-chevron-up');

    if ($(`.docker-folder-parent-${folderName}`).children('i').hasClass('fa-chevron-up')) {
        // add to storage
        for (const folder of folders[folderName]['children'].reverse()) {
            $(`.docker-folder-child-${folderName}`).each(function() {
                if (folder == $(this).find('span.inner > span:first-child').text()) {
                    $(this).appendTo('#docker_list_storage');
                }
            });
        }
        // remove folderName from activeDropdowns
        activeDropdowns = activeDropdowns.filter(function(elm) {
            return elm != folderName;
        })
        // remove spacers
        $(`.docker-folder-spacer-${folderName}`).each(function() {
            $(this).remove();
        });
    } else {
        dashboard_expanded(folderName);
        // add folderName to activeDropdowns
        activeDropdowns.push(folderName);
    }
}

function childrenMove(folderName) {
    for (const folder of folders[folderName]['children'].reverse()) {
        $(`.docker-folder-child-${folderName}`).each(function() {
            if (folder == $(this).find('span.inner > span:first-child').text()) {
                $(this).insertAfter(`.docker-folder-parent-${folderName}`);
            }
        });
    }
}

</script>