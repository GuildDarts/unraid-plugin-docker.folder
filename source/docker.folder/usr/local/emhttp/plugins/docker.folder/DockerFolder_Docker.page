Menu="Docker"
Icon="server"
---
<?php
require_once("/usr/local/emhttp/plugins/docker.folder/include/loadlist_edit.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/eventControl_edit.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/common.php");
?>

<style type="text/css">
    [class*="docker-folder-child-"] > td{
        padding-left: 30px !important;
    }
    .docker-folder-child {
        display:none;
    }
    [class*="docker-folder-child-div-"]{
        display: contents;
    }
</style>

<script>

(async () => {
    folders = await read_folders()
    $( "<tbody id='docker_list_storage' style='display:none;'></tbody>" ).insertAfter( "#docker_list" );
})();




async function apply_folder(callback) {
    let folderNames = Object.keys(await folders)
    
    for (const folderName of folderNames) {
        docker_hide(folderName, "docker")

        let folderId = folders[folderName]['id']
        edit_folder_base(folderName, folderId)
        edit_folder_extra(folderName, folderId)
        autoStartFolder(folderName)
    }
    callback()
    // remove tianon/true orphan image element
    $('#183cb5fd5414').parent().parent().parent().remove()
}


function edit_folder_extra(folderName, folderId) {
    // remoes extra info like container id
    $(`#${folderId}`).parent().parent().find("span.advanced").remove()

    // add docker-folder-parent-${folderName}
    $(`#${folderId}`).parent().parent().parent().addClass(`docker-folder-parent-${folderName}`)

    // remove version network etc...
    var indexesToSelect = [1,2,6,7]
    var elements = $(`.docker-folder-parent-${folderName}`).find( "td" ).filter(function(i) {
      return $.inArray(i, indexesToSelect) > -1;
    });
    elements.empty();

    // add show children button
    if ($(`.docker-folder-parent-${folderName}`).find("td > span > i").length == 0) {
        $(`#${folderId}`).parent().append(`<br><i class="fa fa-fw fa-chevron-up""></i>`)
        $(`.docker-folder-parent-${folderName}`).find("td > span > i").click(function() {
            childrenDropdown(folderName)
        });
    }

    // start_expanded - activeDropdowns
    activeDropdowns = [];
    if (folders[folderName]['start_expanded'] == true) {
        activeDropdowns.push(folderName)
    }

    // wrap children in table
    $(`.docker-folder-child-${folderName}`).wrapAll(`<div class='docker-folder-child-div-${folderName}'></div>`)

    // remove sortable from children and add new sortable
    $(`.docker-folder-child-${folderName}`).each(function() {
        $(this).removeClass("sortable").addClass(`sortable-child-${folderName}`)
    })

    // custom sortable helper for children
    var sortableHelper2 = function(e,i){
        i.children().each(function(){
            $(this).width($(this).width());
        });
        return $(i).clone();
    };

    // make children sortable
    $(`.docker-folder-child-div-${folderName}`).sortable({helper:sortableHelper2,appendTo: document.body,cursor:'move',axis:'y',containment:'parent',cancel:'span.docker_readmore,input',delay:100,opacity:0.5,zIndex:9999,
    update:function(e,ui){
        var children = []
        $(`.docker-folder-child-div-${folderName} > tr`).each(function() {
            var nam = $(this).find('.appname').text();
            children.push(nam)
        })
        folders[folderName]['children'] = children
        loadlistUpdate(e,ui)

        // save new order to folders.json
        let childrenSting = JSON.stringify(children)
        $.post("/plugins/docker.folder/scripts/save_folder_children.php", {
            folderName: folderName,
            children: childrenSting
        });
    }})

    // open dropdown on loadlist
    for (const dropdown of activeDropdowns) {
        if (dropdown == folderName) {
            docker_toggle_visibility(folderName)
            $(`.docker-folder-parent-${folderName}`).find("td > span > i").toggleClass("fa-chevron-down fa-chevron-up")
            childrenMove(folderName)
        }
    }

    // cpu / memory load 
    cpuMemoryLoad(folderName)
}



function childrenDropdown(folderName) {
    docker_toggle_visibility(folderName)
    $(`.docker-folder-parent-${folderName}`).find("td > span > i").toggleClass("fa-chevron-down fa-chevron-up")
    
    if ($(`.docker-folder-parent-${folderName}`).find("td > span > i").hasClass("fa-chevron-up")) {
        $(`.docker-folder-child-div-${folderName}`).each(function() {
            $(this).appendTo("#docker_list_storage")
        });
        // remove folderName from activeDropdowns
        activeDropdowns = activeDropdowns.filter(function(elm) {
            return elm != folderName
        })
    } else {
        childrenMove(folderName)
        // add folderName to activeDropdowns
        activeDropdowns.push(folderName)
    }
}

function childrenMove(folderName) {
    $(`.docker-folder-child-div-${folderName}`).insertAfter(`.docker-folder-parent-${folderName}`)
    /**
    for (const folder of folders[folderName]['children'].reverse()) {
        $(`.docker-folder-child-${folderName}`).each(function() {
            if (folder== $(this).find(".appname").text()) {
                $(this).insertAfter(`.docker-folder-parent-${folderName}`);
            }
        });
    }*/
}

function cpuMemoryLoad(folderName) {
    var cpuLoad = 0.00
    var memoryLoad = 0.00
    var memoryMax = 0.00
        
    $(`.docker-folder-child-${folderName}`).each(function() {
        cpuLoad += parseFloat($(this).find("td.advanced > [class*='cpu-']").text().replace(/\%/g, ""))
        let memory = $(this).find("td.advanced > [class*='mem-']").text().match(/(\d*\.?\d*(?:\w+))/g)
        //console.log(memory)
        if (parseInt(memory[1]) > 0) {
            memoryMax = memory[1]
        }
        memoryLoad += memoryCheck(memory[0])
    });
    $(`.docker-folder-parent-${folderName}`).children("td.advanced").children("[class*='cpu-']").text(cpuLoad.toFixed(2) + '%')
    $(`.docker-folder-parent-${folderName}`).children("td.advanced").children("[class*='mem-']").text(`${memoryLoad}MiB / ${memoryMax}`)

    setTimeout(cpuMemoryLoad.bind(null, folderName), 2000);
}


function memoryCheck(mem) {
    let nr
    let type
    mib = mem.match(/(\d*\.?\d+)/g)
    return parseInt(mib)
}


function autoStartFolder(folderName) {

    // set the init state for folder autostart
    if (checkFolderSwitch()) {
        var initState = 'checked'
    }

    // adds switches
    $(`.docker-folder-parent-${folderName}`).find('td:nth-last-child(2)').html(
        `<input type="checkbox" class="docker-folder-autostart" folder="${folderName}" ${initState}>`
    ).find('input').switchButton({
        labels_placement: "right"
    });

    // event: clicks all the children so they match parent
    $(`.docker-folder-parent-${folderName}`).find('input.docker-folder-autostart').change(function() {
        clickChild($(this).prop('checked'))
    });
    

    function clickChild(state) {
        $(`.docker-folder-child-${folderName}`).find('input.autostart').each(function() {
            if (state !== $(this).prop('checked')) {
                $(this).parent().find('div.switch-button-background').trigger('click')
            }
        })
    }

    // returns true if any child has autostart checked
    function checkFolderSwitch() {
        var initStateArray = []
        $(`.docker-folder-child-${folderName}`).find('input.autostart').each(function() {
            initStateArray.push($(this).prop('checked'))
        })
        
        return initStateArray.some( (val, i, arr) => val === true)
    }


}


$('<input/>', {
    type: 'button',
    onclick: 'addFolder()',
    value: 'Add Folder',
    style: 'display:none'
}).insertBefore("div.content > input:first-of-type");

function addFolder() {
  var path = location.pathname;
  var x = path.indexOf('?');
  if (x!=-1) path = path.substring(0,x);
  location = path+'/AddFolder';
}




</script>