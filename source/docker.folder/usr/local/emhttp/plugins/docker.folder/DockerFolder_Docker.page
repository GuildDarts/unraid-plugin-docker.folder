Menu="Docker"
Icon="server"
---
<?php
require_once("/usr/local/emhttp/plugins/docker.folder/include/loadlist_edit.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/common.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/eventControl_edit.php");
?>

<style type="text/css">
    [class*="docker-folder-child-"] > td{
        padding-left: 30px !important;
    }
    .docker-folder-child {
        display:none;
    }
    .expanded_right {
        transform: translate(150px, -30px);
        color: #7c7c7c;
        border: solid;
        border-width: 1px;
        border-radius: 5px;
        padding: 5px;
        position: absolute;
    }
</style>

<script>

(async () => {
    folders = await read_folders()
    $( "<tbody id='docker_list_storage' style='display:none;'></tbody>" ).insertAfter( "#docker_list" );
    activeDropdowns = [];
})();

async function apply_folder(callback) {
    waitForGlobal("folders", async function() {
        let folderNames = Object.keys(await folders)
        folderChildren = []
        
        for (const folderName of folderNames) {
            edit_folder_base(folderName)
            edit_folder_extra(folderName)
            autoStartFolder(folderName)
        }
        callback()
    });
}

function edit_folder_extra(folderName) {

    // advanced view fix
    if (!$('input.advancedview').prop('checked')) {
        $(`.docker-folder-parent-${folderName}`).children('td.advanced').hide()
    }

    // add show children button
    if ($(`.docker-folder-parent-${folderName}`).find("td.ct-name  > span > i").length == 0) {

        $(`.docker-folder-parent-${folderName}`).find('span.outer').append(`<br><i class="fa fa-fw fa-chevron-up expanded_${folders[folderName]['docker_expanded_style']}""></i>`)

        $(`.docker-folder-parent-${folderName}`).find("td.ct-name  > span > i").click(function() {
            childrenDropdown(folderName)
        });
    }

    // docker_start_expanded - activeDropdowns
    if (folders[folderName]['docker_start_expanded'] == true && !activeDropdowns.includes(folderName)) {
        activeDropdowns.push(folderName)
    }

    // wrap children in table
    $(`.docker-folder-child-${folderName}`).wrapAll(`<div class='docker-folder-child-div-${folderName}'></div>`)

    // remove sortable from children and add new sortable
    $(`.docker-folder-child-${folderName}`).each(function() {
        $(this).removeClass("sortable").addClass(`sortable-child-${folderName}`)
    })

    // custom sortable helper for children
    var sortableHelper2 = function(e,i){
        i.children().each(function(){
            $(this).width($(this).width());
        });
        return $(i).clone();
    };

    // make children sortable
    $(`.docker-folder-child-div-${folderName}`).sortable({helper:sortableHelper2,appendTo: document.body,cursor:'move',axis:'y',containment:'parent',cancel:'span.docker_readmore,input',delay:100,opacity:0.5,zIndex:9999,
    update:function(e,ui){
        var children = []
        $(`.docker-folder-child-div-${folderName} > tr`).each(function() {
            var nam = $(this).find('.appname').text();
            children.push(nam)
        })
        folders[folderName]['children'] = children
        loadlistUpdate(e,ui)

        // save new order to folders.json
        let childrenSting = JSON.stringify(children)
        $.post("/plugins/docker.folder/scripts/save_folder_children.php", {
            folderName: folderName,
            children: childrenSting
        });
    }})

    // open dropdown on loadlist
    for (const dropdown of activeDropdowns) {
        if (dropdown == folderName) {
            docker_toggle_visibility(folderName)
            $(`.docker-folder-parent-${folderName}`).find("td.ct-name > span > i").toggleClass("fa-chevron-down fa-chevron-up")
            childrenMove(folderName)
        }
    }

    // folder update status
    var upToDate = true
    for (const child of folders[folderName]['children']) {
        waitForGlobal("docker", function() {
            for (const dock of docker) {
                if (child == dock['name']) {
                    if (dock['update'] == 1) {
                        upToDate = false
                    }
                }
            }
        })
    }
    if (upToDate == true) {
        var updateConf = `<span class="green-text" style="white-space:nowrap;"><i class="fa fa-check fa-fw"></i> up-to-date</span>`
    } else {
        var updateConf = `<span class="orange-text" style="white-space:nowrap;"><i class="fa fa-flash fa-fw"></i> update ready</span>`
    }
    $(`.docker-folder-parent-${folderName}`).find('td.updatecolumn').html(updateConf)

    // cpu / memory load 
    cpuMemoryLoad(folderName)
}

function childrenDropdown(folderName) {
    docker_toggle_visibility(folderName)
    $(`.docker-folder-parent-${folderName}`).find("td.ct-name > span > i").toggleClass("fa-chevron-down fa-chevron-up")
    
    if ($(`.docker-folder-parent-${folderName}`).find("td.ct-name > span > i").hasClass("fa-chevron-up")) {
        $(`.docker-folder-child-div-${folderName}`).each(function() {
            $(this).appendTo("#docker_list_storage")
        });
        // remove folderName from activeDropdowns
        activeDropdowns = activeDropdowns.filter(function(elm) {
            return elm != folderName
        })
    } else {
        childrenMove(folderName)
        // add folderName to activeDropdowns
        activeDropdowns.push(folderName)
    }
}

function childrenMove(folderName) {
    $(`.docker-folder-child-div-${folderName}`).insertAfter(`.docker-folder-parent-${folderName}`)
}

function cpuMemoryLoad(folderName) {
    var cpuLoad = 0.00
    var memoryLoad = 0.00
    var memoryMax = 0.00
        
    $(`.docker-folder-child-${folderName}`).each(function() {
        cpuLoad += parseFloat($(this).find("td.advanced > [class*='cpu-']").text().replace(/\%/g, ""))
        let memory = $(this).find("td.advanced > [class*='mem-']").text().match(/(\d*\.?\d*(?:\w+))/g)

        if (parseInt(memory[1]) > 0) {
            memoryMax = memory[1]
            memoryLoad += formatToBytes(memory[0])
        }
    });

    $(`.docker-folder-parent-${folderName}`).find('td.advanced > .cpu').text(cpuLoad.toFixed(2) + '%')
    $(`.docker-folder-parent-${folderName}`).find('td.advanced > .usage-disk > #cpu').css('width', `${cpuLoad.toFixed(2)}%`)
    $(`.docker-folder-parent-${folderName}`).find('td.advanced > .mem').text(`${formatBytes(memoryLoad)} / ${memoryMax}`)

    setTimeout(cpuMemoryLoad.bind(null, folderName), 2000);
}

function formatToBytes(mem) {
    const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
    const match = /(\d*\.?.+\d+)(\w+)/g.exec(mem) || []
    let num = parseFloat(match[1])
    const size = match[2]

    num *= (1024**sizes.indexOf(size))

    return num
}

function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0';

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + '' + sizes[i];
}

function autoStartFolder(folderName) {
    // set the init state for folder autostart
    if (checkFolderSwitch()) {
        var initState = 'checked'
    }

    // adds switches
    $(`.docker-folder-parent-${folderName}`).find('td:nth-last-child(2)').html(
        `<input type="checkbox" class="docker-folder-autostart" folder="${folderName}" ${initState}>`
    ).find('input').switchButton({
        labels_placement: "right"
    });

    // event: clicks all the children so they match parent
    $(`.docker-folder-parent-${folderName}`).find('input.docker-folder-autostart').change(function() {
        clickChild($(this).prop('checked'))
    });
    

    function clickChild(state) {
        $(`.docker-folder-child-${folderName}`).find('input.autostart').each(function() {
            if (state !== $(this).prop('checked')) {
                $(this).parent().find('div.switch-button-background').trigger('click')
            }
        })
    }

    // returns true if any child has autostart checked
    function checkFolderSwitch() {
        var initStateArray = []
        $(`.docker-folder-child-${folderName}`).find('input.autostart').each(function() {
            initStateArray.push($(this).prop('checked'))
        })
        
        return initStateArray.some( (val, i, arr) => val === true)
    }


}

$('<input/>', {
    type: 'button',
    onclick: 'addFolder()',
    value: 'Add Folder',
    style: 'display:none'
}).insertBefore("div.content > input:first-of-type");

function addFolder() {
  var path = location.pathname;
  var x = path.indexOf('?');
  if (x!=-1) path = path.substring(0,x);
  location = path+'/AddFolder';
}

</script>