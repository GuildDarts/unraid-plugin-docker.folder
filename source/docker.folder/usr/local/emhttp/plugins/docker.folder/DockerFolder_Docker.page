Menu="Docker"
Icon="server"
---
<?php
require_once("/usr/local/emhttp/plugins/docker.folder/include/loadlist_edit.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/listview_edit.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/common.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/eventControl_edit.php");
?>

<style type="text/css">
    :root {
    --border-color: #c4c4c4;
    }
    [class*="docker-folder-parent-"] > .updatecolumn {
        padding: 4px 0px 4px 6px;
    }
    [class*="docker-folder-child-"] > td:first-child {
        padding-left: 30px !important;
    }
    .docker-folder-child {
        display:none;
    }
    .expanded_right {
        float: right;
        transform: translate(-12px, 5px);
        color: #7c7c7c;
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
        padding: 5px;
    }
    [class*="docker-folder-child-div-"] > tr:first-child {
        border-top: 1px solid var(--border-color);
    }
    [class*="docker-folder-child-div-"] > tr {
        border-bottom: 1px solid var(--border-color);
    }

    .label-tab > .ct-name > div > .outer > .inner {
        padding-top: 6px;
    }
    .label-tab > .ct-name, .dockerPreview {
        padding: 4px !important;
    }
    .label-tab > .ct-name > div {
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
        box-shadow: -10px 0 0px -2px #91c8f0 inset;
    }
    .label-tab > .ct-name > div > .outer > .hand img {
        height: 42px;
        width: 42px;
        margin-right: 0px;
    }
    .label-tab > .ct-name > div > .outer > .hand > :first-child {
        height: 42px;
        width: 42px;
        border-right: solid;
        border-width: 1px;
        border-color: var(--border-color);
        padding: 2px;
        margin-right: 6px;
    }
    .ff-container > .ff-canvas {
        top: 2px;
        left: 2px;
    }
    .label-tab .expanded_right {
        transform: translate(-15px, 10px);
    }

    .dockerPreview-no-icon-container {
        display: grid;
        grid-template-columns: max-content repeat(6, max-content );
        color: #626262;
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
        margin-block-start: initial;
        margin-block-end: initial;
        margin-inline-start: initial;
        margin-inline-end: initial;
        padding-inline-start: initial;
        list-style-position: inside;
        padding-top: 6px;
        padding-bottom: 6px;
        box-shadow: 10px 0 0px -2px #beddf5 inset;
    }
    .dockerPreview-no-icon-container > div {
        padding-left: 10px;
        white-space: nowrap;
        overflow: hidden;
    }
    .dockerPreview-no-icon-container > .header {
        font-size: 14px;
        font-weight: bold;
        grid-area: 1 / 1 / span 2 / span 1;
        border-right: solid;
        border-width: 1px;
        border-color: var(--border-color);
        padding-right: 6px;
        padding-top: 12px;
        margin-top: -6px;
        margin-bottom: -6px;
        margin-left: 4px;
    }
    .dockerPreview-no-icon-container li {
        padding-left: 4px;
        cursor: pointer;
    }
    .dockerPreview-no-icon-container > li > span {
        position: relative;
        left: -10px;
    }
    /* chrome/firefox issue with bullet points */
    @media screen and (min--moz-device-pixel-ratio:0) {
        .dockerPreview-no-icon-container > li > span {
            left: -5px;
        }
    }

    .dockerPreview-icon-container {
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
        box-shadow: 10px 0 0px -2px #beddf5 inset;
        padding: 2px;
    }
    .dockerPreview-icon-container img.img {
        margin-right: 6px;
    }
    .dockerPreview-icon-container > td:first-child img.img {
        padding-left: 4px;
    }
    .dockerPreview-icon-container .log > img {
        display: inline-block;
    }
    .dockerPreview-icon-container td {
        width: auto;
        padding-right: 6px !important;
        white-space: nowrap;
        position: relative;
    }
    .dockerPreview-icon-container td:not(:first-child) {
        padding-left: 6px;
    }
    .dockerPreview-icon-container td:last-child {
        border-right: 0px;
    }
    .dockerPreview-grayscale {
        white-space: nowrap;
        overflow: hidden;
        filter: grayscale(100%);
        opacity: 0.9;
    }

    .border-right {
        left: 100%;
        top: 3px;
        bottom: 3px;
        position: absolute;
        border-right: 1px solid #b9b7b7;
    }

    .dropdown-menu-advanced {
        display: grid !important;
        min-width: 540px;
        min-height: 275px;
        padding: 8px;
        margin: 2px 0 0;
        background-color: #FFF;
        font-size: 1.3rem;
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        -webkit-background-clip: padding-box;
        -moz-background-clip: padding;
        background-clip: padding-box;
        text-align: left;

        grid-template-areas: 'header-name header-info header-info'
                             'naviagtion info info'
                             'naviagtion info info'
                             'extra-info info info';
    }

    .dropdown-menu-advanced > .naviagtion a {
        display:block;
    }

    .dropdown-menu-advanced > .naviagtion li > a:hover, .dropdown-menu-advanced > .naviagtion li > a:focus {
        color:#333;
        text-decoration:none;
        background-color:#0088cc;
        background-color:#0081c2;
        background-image:-moz-linear-gradient(top, #e1e1e1, #0077b3);
        background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0077b3));
        background-image:-webkit-linear-gradient(top, #0088cc, #0077b3);
        background-image:-o-linear-gradient(top, #e1e1e1, #0077b3);
        background-image:linear-gradient(to bottom, #e6e6e6, #e9e9e9);
        background-repeat:repeat-x;
        filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff0088cc', endColorstr='#ff0077b3', GradientType=0);
    }

    .dropdown-menu-advanced > .naviagtion .active > a, .dropdown-menu-advanced > .naviagtion .active > a:hover {
        color:#ffffff;
        text-decoration:none;
        background-color:#0088cc;
        background-color:#0081c2;
        background-image:linear-gradient(to bottom, #0088cc, #0077b3);
        background-image:-moz-linear-gradient(top, #0088cc, #0077b3);
        background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0077b3));
        background-image:-webkit-linear-gradient(top, #0088cc, #0077b3);
        background-image:-o-linear-gradient(top, #0088cc, #0077b3);
        background-repeat:repeat-x;
        outline:0;
        filter:progid:dximagetransform.microsoft.gradient(startColorstr='#ff0088cc', endColorstr='#ff0077b3', GradientType=0);
    }

    .dropdown-menu-advanced td, .dropdown-menu-advanced th{
        width: 1%;
        white-space: nowrap;
    }

    .dropdown-menu-advanced > .header-name th:not(:first-child), .dropdown-menu-advanced > .header td:not(:first-child) {
        padding-left: 8px;
    }

    .dropdown-menu-advanced > [class*="header-"] {
        background-color: #f3f3f3;
        height: 80px;
        margin-bottom: 8px;
    }

    .dropdown-menu-advanced > .header-name {
        grid-area: header-name;
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px 0px 0px 5px;
        margin-right: -5px;
    }

    .dropdown-menu-advanced > .header-info {
        grid-area: header-info;
        border-style: solid solid solid none;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 0px 5px 5px 0px;
        margin-left: 5px;
    }

    .dropdown-menu-advanced > .header-name > .ct-name {
        padding-left: 8px;
        padding-right: 4px;
        padding-top: 10px;
    }

    .dropdown-menu-advanced > .header-name > .ct-name > .outer > .inner {
        padding-top: 5px;
        padding-left: 2px;
    }

    .dropdown-menu-advanced > .header-info th {
        background-color: #CED1D3;
    }

    .dropdown-menu-advanced > .header-info th:first-child, .dropdown-menu-advanced > .header-info td:first-child {
        padding-left: 8px;
    }

    .dropdown-menu-advanced > .header-name span > img {
        height: 58px;
        width: 58px;
        margin-right: 4px;
    }

    .dropdown-menu-advanced > .naviagtion {
        grid-area: naviagtion;
        padding-bottom: 8px;
    }

    .dropdown-menu-advanced > .naviagtion > div {
        display: inline-block;
    }

    .dropdown-menu-advanced > .naviagtion li {
        display: block;
        padding: 4px;
    }

    .dropdown-menu-advanced > .naviagtion li > a {
        color: #333;
        text-decoration: none;
    }

    .dropdown-menu-advanced > .info {
        grid-area: info;
        padding-left: 5px;
        min-width: inherit;
    }

    .dropdown-menu-advanced > .info > * {
        background: #F1F2F4;
    }

    .dropdown-menu-advanced > .info > div {
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
    }

    .dropdown-menu-advanced > .info .ports {
        border-bottom-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        padding-bottom: 10px;
    }

    .dropdown-menu-advanced > .info .mapping > div {
        display: flex;
    }

    .dropdown-menu-advanced > .info .mapping > div > :first-child {
        float: left;
    }

    .dropdown-menu-advanced > .info .mapping > div > :last-child {
        display: table;
    }

    .dropdown-menu-advanced > .info button {
        font-family: sans-serif;
        font-size: 11px;
        letter-spacing: inherit;
        text-transform: inherit;
        border: none;
        margin: 0px;
        padding-left: 12px;
        padding-right: 12px;
        padding-top: 2px;
        padding-bottom: 2px;
        color: #666;
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
    }

    .dropdown-menu-advanced > .extra-info {
        grid-area: extra-info;
        white-space: nowrap;
        background-color: #fff6de;
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
        padding: 8px;
    }

    .tooltipster-docker-folder {
        width: initial !important;
    }

    .tooltipster-docker-folder > .tooltipster-box {
        border: initial !important;
        background: initial;
    }

    .tooltipster-docker-folder > .tooltipster-box > .tooltipster-content {
        color: initial;
        padding: initial;
        overflow: initial;
    }
</style>

<script src="/plugins/docker.folder/include/chart/Chart.bundle.min.js"></script>
<script src="/plugins/docker.folder/include/chart/chartjs-adapter-date-fns.bundle.min.js"></script>
<script src="/plugins/docker.folder/include/chart/chartjs-plugin-streaming.min.js"></script>
<script>

(async () => {
    folders = await read_folders()
    $( "<tbody id='docker_list_storage' style='display:none;'></tbody>" ).insertAfter( "#docker_list" );
    activeDropdowns = [];
})();

async function apply_folder(callback) {
    waitForGlobal("folders", async function() {
        let folderNames = Object.keys(await folders)
        folderChildren = []
        
        for (const folderName of folderNames) {
            edit_folder_base(folderName)
            edit_folder_extra(folderName)
        }
        callback()
    });
}

function edit_folder_extra(folderName) {

    // advanced view fix
    if (!$('input.advancedview').prop('checked')) {
        $(`.docker-folder-parent-${folderName}`).children('td.advanced').hide()
    }

    // add show children button
    if ($(`.docker-folder-parent-${folderName}`).find('.outer > i').length == 0) {

        switch (folders[folderName]['docker_expanded_style']) {
            case 'bottom':
                $(`.docker-folder-parent-${folderName}`).find('.outer').append(`<br><i class="fa fa-fw fa-chevron-up expanded_bottom""></i>`)
                break;

            case 'right':
                $(`.docker-folder-parent-${folderName}`).find('.outer').append(`<i class="fa fa-fw fa-chevron-up expanded_right""></i>`)
                break;
        }

        $(`.docker-folder-parent-${folderName}`).find('.outer > i').click(function() {
            childrenDropdown(folderName)
        });
    }

    // docker_start_expanded - activeDropdowns
    if (folders[folderName]['docker_start_expanded'] == true && !activeDropdowns.includes(folderName)) {
        activeDropdowns.push(folderName)
    }

    // wrap children in table
    $(`.docker-folder-child-${folderName}`).wrapAll(`<div class='docker-folder-child-div-${folderName}'></div>`)

    // remove sortable from children and add new sortable
    // adjust child width (done to counter padding)
    $(`.docker-folder-child-${folderName}`).each(function() {
        $(this).removeClass("sortable").addClass(`sortable-child-${folderName}`)
        $(this).children('.ct-name').css({
            'width': '190'
        })
    })

    // custom sortable helper for children
    var sortableHelper2 = function(e,i){
        i.children().each(function(){
            $(this).width($(this).width());
        });
        return $(i).clone();
    };

    // make children sortable
    $(`.docker-folder-child-div-${folderName}`).sortable({helper:sortableHelper2,appendTo: document.body,cursor:'move',axis:'y',containment:'parent',cancel:'span.docker_readmore,input',delay:100,opacity:0.5,zIndex:9999,
    update:function(e,ui){
        var children = []
        $(`.docker-folder-child-div-${folderName} > tr`).each(function() {
            var nam = $(this).find('.appname').text();
            children.push(nam)
        })
        folders[folderName]['children'] = children
        loadlistUpdate(e,ui)
    }})

    // open dropdown on loadlist
    for (const dropdown of activeDropdowns) {
        if (dropdown == folderName) {
            docker_toggle_visibility(folderName)
            $(`.docker-folder-parent-${folderName}`).find('.outer > i').toggleClass('fa-chevron-down fa-chevron-up')
            childrenMove(folderName)
        }
    }

    // folder update status
    var upToDate = true
    for (const child of folders[folderName]['children']) {
        waitForGlobal("docker", function() {
            for (const dock of docker) {
                if (child == dock['name']) {
                    if (dock['update'] == 1) {
                        upToDate = false
                    }
                }
            }
        })
    }
    if (upToDate == true) {
        var updateConf = `<span class="green-text" style="white-space:nowrap;"><i class="fa fa-check fa-fw"></i> up-to-date</span>`
    } else {
        var updateConf = `<span class="orange-text" style="white-space:nowrap;"><i class="fa fa-flash fa-fw"></i> update ready</span>`
    }
    $(`.docker-folder-parent-${folderName}`).find('td.updatecolumn').html(updateConf)

    // auto start folder
    autoStartFolder(folderName)

    // docker preview
    dockerPreview(folderName)

    // icon style
    iconStyle(folderName)

    // cpu / memory load 
    cpuMemoryLoad(folderName)

    // advanced context menu
    advancedContextMenu(folderName)
}

function childrenDropdown(folderName) {
    docker_toggle_visibility(folderName)
    $(`.docker-folder-parent-${folderName}`).find('.outer > i').toggleClass('fa-chevron-down fa-chevron-up')
    
    if ($(`.docker-folder-parent-${folderName}`).find('.outer > i').hasClass('fa-chevron-up')) {
        $(`.docker-folder-child-div-${folderName}`).each(function() {
            $(this).appendTo("#docker_list_storage")
        });
        // remove folderName from activeDropdowns
        activeDropdowns = activeDropdowns.filter(function(elm) {
            return elm != folderName
        })
    } else {
        childrenMove(folderName)
        // add folderName to activeDropdowns
        activeDropdowns.push(folderName)
    }
}

function childrenMove(folderName) {
    $(`.docker-folder-child-div-${folderName}`).insertAfter(`.docker-folder-parent-${folderName}`)
}

function cpuMemoryLoad(folderName) {
    var cpuLoad = 0.00
    var memoryLoad = 0.00
    var memoryMax = 0.00

    if ($('input.advancedview').prop('checked')) {
        $(`.docker-folder-child-${folderName}`).each(function() {
            cpuLoad += parseFloat($(this).find("td.advanced > [class*='cpu-']").text().replace(/\%/g, ""))
            let memory = getMemUsage($(this))
                memoryLoad += memory['load']
                memoryMax = (memory['max'] != 0) ? memory['max'] : memoryMax
        });

        $(`.docker-folder-parent-${folderName}`).find('td.advanced > .cpu').text(cpuLoad.toFixed(2) + '%')
        $(`.docker-folder-parent-${folderName}`).find('td.advanced > .usage-disk > #cpu').css('width', `${cpuLoad.toFixed(2)}%`)
        $(`.docker-folder-parent-${folderName}`).find('td.advanced > .mem').text(`${formatBytes(memoryLoad)} / ${memoryMax}`)
    }
    
    setTimeout(cpuMemoryLoad.bind(null, folderName), 2000);
}

function getMemUsage(childElement) {
    let memory = childElement.find("td.advanced > [class*='mem-']").text().match(/(\d*\.?\d*(?:\w+))/g)

    memoryMax = memory[1] || 0
    memoryLoad = formatToBytes(memory[0]) || 0

    return {load: memoryLoad, max: memoryMax}
}

function formatToBytes(mem) {
    const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
    const match = /(\d*\.?.+\d+)(\w+)/g.exec(mem) || []
    let num = parseFloat(match[1])
    const size = match[2]

    num *= (1024**sizes.indexOf(size))

    return num
}

function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0';

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + '' + sizes[i];
}

function autoStartFolder(folderName) {
    // set the init state for folder autostart
    if (checkFolderSwitch()) {
        var initState = 'checked'
    }

    // adds switches
    $(`.docker-folder-parent-${folderName}`).find('td:nth-last-child(2)').html(
        `<input type="checkbox" class="docker-folder-autostart" folder="${folderName}" ${initState}>`
    ).find('input').switchButton({
        labels_placement: "right"
    });

    // event: clicks all the children so they match parent
    $(`.docker-folder-parent-${folderName}`).find('input.docker-folder-autostart').change(function() {
        clickChild($(this).prop('checked'))
    });
    

    function clickChild(state) {
        $(`.docker-folder-child-${folderName}`).find('input.autostart').each(function() {
            if (state !== $(this).prop('checked')) {
                $(this).parent().find('div.switch-button-background').trigger('click')
            }
        })
    }

    // returns true if any child has autostart checked
    function checkFolderSwitch() {
        var initStateArray = []
        $(`.docker-folder-child-${folderName}`).find('input.autostart').each(function() {
            initStateArray.push($(this).prop('checked'))
        })
        
        return initStateArray.some( (val, i, arr) => val === true)
    }


}

function dockerPreview(folderName) {
    const dockerPreview = $(`.docker-folder-parent-${folderName} > .dockerPreview`)

    switch (folders[folderName]['docker_preview']) {
        case 'no-icon':
            dockerPreview.append(`<ul class="dockerPreview-no-icon-container"><div class="header">Dockers:</div></ul>`)
            $(`.docker-folder-child-div-${folderName}`).children().each(function(i) {
                if (i < 12) {
                    let child = $(this).find('.appname').text()
                    let id = $(this).find('.hand').attr('id')

                    let row = ((2+i) % 2 == 0) ? 1 : 2
                    let element = $(`<li class="docker-preview-id-${id}"><span>${child}</span></li>`)
                    dockerPreview.find('.dockerPreview-no-icon-container').append(element)
                    dockerPreview.find('.dockerPreview-no-icon-container > li:last-of-type').css('grid-area', `${row}`)

                    // make text orange on update
                    updateText(folderName, id, element, 'no-icon')

                    // add context menu
                    dockerPreview.find(`.dockerPreview-no-icon-container > li.docker-preview-id-${id}`).click(function(e) {
                        showContextMenu(e, id, folderName)
                    })
                }
            })

            hoverOnly(folderName)
            break;

        case 'icon':
            dockerPreview.append(`<div class="dockerPreview-icon-container"></div></div>`)
            var dockerPreviewWidth = dockerPreview.width()
            var widthTotal = 0
            var childrenCount = $(`.docker-folder-child-div-${folderName}`).children().length
            $(`.docker-folder-child-div-${folderName}`).children().each(function(i) {
                let clone = $(this).children('.ct-name').clone(true).removeAttr('style class').appendTo(dockerPreview.children('.dockerPreview-icon-container'))
                    clone.children('.advanced').remove()
                    let idElement = clone.find('.outer > .hand')
                    let id = idElement.attr('id')
                    idElement.removeAttr('id')
                    idElement.addClass(`docker-preview-id-${id}`)
                    if (folders[folderName]['docker_preview_icon_show_log']) {
                        let log = $(this).find('td:last-child > .log').clone(true)
                            log.children('img').removeClass('basic').removeAttr('style')
                            log.children('.advanced').remove()
                        clone.find('.outer > .inner').append(log)
                    }
                let width = clone.width()
                widthTotal += width

                if (widthTotal >= dockerPreviewWidth) {
                    clone.remove()
                    return false
                } else {
                    clone.prev().children('.outer').append('<div class="border-right">')
                }

                // make text orange on update
                updateText(folderName, id, clone, 'icon')

                // add context menu
                idElement.click(function(e) {
                    showContextMenu(e, id, folderName)
                })
            })

            // grayscale
            if (folders[folderName]['docker_preview_icon_grayscale']) {
                dockerPreview.children('.dockerPreview-icon-container').find('img').addClass('dockerPreview-grayscale')
            }

            hoverOnly(folderName)
            break;
    }

    function hoverOnly(folderName) {
        if (folders[folderName]['docker_preview_hover_only']) {
            $(`.docker-folder-parent-${folderName} > .dockerPreview > :first-child`).css('visibility', 'hidden').fadeTo(0, 0)

            $(`.docker-folder-parent-${folderName} > .dockerPreview`).hover(
                function() {
                    $(this).children(':first-child').css('visibility', 'initial').fadeTo(500, 1)
                }, function() {
                    $(this).children(':first-child').fadeTo(500, 0, function(){
                        $(this).css('visibility', 'hidden')
                    })
                }
            );
        }
    }

    function updateText(folderName, id, element, type) {
        if (folders[folderName]['docker_preview_text_update_color']) {
            waitForGlobal('docker', function() {
                for (const dock of docker) {
                    if (id === dock['id']) {
                        if (dock['update'] === 1) {
                            if (type === 'icon') {
                                let appname = element.find('.outer > .inner > .appname')
                                let appnameChild = appname.children('a')

                                if (appnameChild.length > 0) {
                                    appnameChild.addClass('orange-text')
                                } else {
                                    appname.addClass('orange-text')
                                }
                            } else {
                                element.children('span').addClass('orange-text')
                            }
                            break
                        }
                    }
                }
            })
        }
    }
}

function iconStyle(folderName) {
    switch (folders[folderName]['docker_icon_style']) {
        case 'label-tab':
            // blue text / bigger text size
            $(`.docker-folder-parent-${folderName}`).find('.ct-name .appname').addClass('blue-text').css({
                'font-size': 'larger',
                'font-weight': 'bold'
            })

            $(`.docker-folder-parent-${folderName}`).addClass('label-tab')
            break;
    }
}

function advancedContextMenu(folderName) {
    if (folders[folderName]['docker_preview_advanced_context_menu']) {
        listview_edit()
        $.post('/plugins/dynamix.docker.manager/include/UpdateConfig.php', {action:'docker_load_start'});
        for (const child of folders[folderName]['children']) {
            let id = dockerIds[child]
            const dropdownMenuAdvancedElement = `
                <div class="dropdown-menu-advanced" id="dropdown-advanced-${id}">
                    <div class="header-name">
                    <div class="ct-name">
                        </div>
                    </div>
                    <div class="header-info">
                        <table style="display: contents; height: 100%; width: 100%; background-color: transparent; margin: 0px;">
                            <thead>
                                <tr>
                                    <th>Version</th>
                                    <th>CPU/MEM</th>
                                    <th>Autostart</th>
                                    <th>Log</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="version"></td>
                                    <td class="cpu-mem"></td>
                                    <td class="autostart">
                                        <input type="checkbox" id="${id}-preview-auto" class="autostart" container="${child}">
                                    <td class="log"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="naviagtion">
                        <div class="buttons" style="min-height: 125px;"></div>
                    </div>
                    <div class="info">
                        <button name="graphs">Graphs</button>
                        <button name="mapping">Mapping</button>
                        <div style="min-height: 176px; min-width: 100%; max-width: 540px;">
                            <div class="graphs">
                                <div class="chart-combined" style="float: left; position: relative; height: 170px; width: 540px;">
                                    <canvas></canvas>
                                </div>
                                <div class="chart-cpu" style="float: left; position: relative; height: 170px; width: 270px;">
                                    <canvas></canvas>
                                </div>
                                <div class="chart-mem" style="float: left; position: relative; height: 170px; width: 270px;">
                                    <canvas></canvas>
                                </div>
                            </div>
                            <div class="mapping" style="display: none; padding: 10px; max-height: 150px; overflow-y: auto;">
                                <div class="network">
                                    <span class="blue-text" style="padding-right: 18px;">Network: </span>
                                    <span>NETWORK-TYPE</span>
                                </div>
                                <div class="ports">
                                    <span class="blue-text" style="padding-right: 36px;">Ports: </span>
                                </div>
                                <div class="paths" style="padding-top: 10px;">
                                    <span class="blue-text" style="padding-right: 36px;">Paths: </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="extra-info"></div>
                </div>
            `

            // header
            let clone = $(dropdownMenuAdvancedElement).clone(true)
            let dockerElement = $(`#${id}`).parent().parent().parent().clone(true)       


            let ctNameElement = dockerElement.children('.ct-name')
                let extraInfo = ctNameElement.children('.advanced').remove()
                ctNameElement.find('.outer > .hand').removeAttr('class').attr('id', `advanced-context-${id}`)
                ctNameElement.find('.outer > .inner > .appname').css({
                    'font-size': 'larger',
                    'font-weight': 'bold'
                })
            let dockerVersion = dockerElement.children('.updatecolumn')
                dockerVersion.children('.advanced').removeClass('advanced')
            let dockerCpuMem = dockerElement.children('.advanced')
                dockerCpuMem.children('br').remove()
            let dockerAutostart = dockerElement.children(':nth-last-child(2)')
                dockerAutostart.find('[id*="-wait"]').css({
                    'display': 'block',
                    'float': 'initial',
                    'transform': 'translateX(10px)'
                })
            let dockerLog = dockerElement.children(':last-child')
                dockerLog.find('img').remove()
                dockerLog.find('div').removeClass('advanced')

            let trBody = clone.find('.header-info > table > tbody > tr')
                clone.find('.header-name > div').html(ctNameElement.html())
                trBody.children('td.version').html(dockerVersion.html())
                trBody.children('td.cpu-mem').html(dockerCpuMem.html())
                trBody.children('td.log').html(dockerLog.html())
                trBody.children('td.autostart').append(dockerAutostart.find('[id*="-wait"]'))
                let autostart = trBody.find(`td.autostart > #${id}-preview-auto`)
                    autostart.switchButton({labels_placement: 'right', checked: $(`#${id}-auto`).prop('checked')})
                    autostart.change(function() {
                        $(`#${id}-auto`).next().click()
                    })

            // naviagtion
            let dropdownElement = $(`#dropdown-${id}`).clone(true)
                dropdownElement.children('.divider').remove()
                dropdownElement.children().slice(0, 5).wrapAll('<div style="float: left; border-right-style: solid; border-color: var(--border-color); border-width: 1px;"></div>')
                dropdownElement.children('li').wrapAll('<div style="float: right;"></div>')

            clone.find('.naviagtion > .buttons').html(dropdownElement.html())
            // close tooltip on button click
            clone.find('.naviagtion > .buttons > div > li > a').click(function() {
                $(`.docker-preview-id-${id}`).tooltipster('close')
            })

            // info
            let ports = dockerElement.find(':nth-child(4) > :first-child').removeAttr('class')
            let network = dockerElement.children(':nth-child(3)').text()
            let paths = dockerElement.find(':nth-child(5) > :first-child').removeAttr('class')

            clone.find('.info .ports').append(ports)
            clone.find('.info .network > span:last-child').text(network)
            clone.find('.info .paths').append(paths)

            clone.find('.extra-info').html(extraInfo.html())

            // button
            clone.find('.info > button').click(function() {
                let name = $(this).attr('name')
                let div = clone.find('.info > div')
                if(name === 'graphs') {
                    div.children('.graphs').show()
                    div.children('.mapping').hide()
                } else {
                    div.children('.graphs').hide()
                    div.children('.mapping').show()
                }
            })

            // settings
            cpuDataset = {
                            label: 'CPU',
                            borderColor: 'rgb(96, 151, 75)',
                            backgroundColor: 'rgba(181, 210, 171, 0.7)',
                            borderWidth: 0,
                            data: []
                        }

            memDataset = {
                            label: 'MEM',
                            borderColor: 'rgb(82, 159, 211)',
                            backgroundColor: 'rgba(192, 216, 233, 0.7)',
                            borderWidth: 0,
                            data: []
                        }

            let charts = []
            switch (folders[folderName]['docker_preview_advanced_context_menu_graph_mode']) {
                case 'none':
                    clone.find('.info > button:first-child').hide()
                    clone.find('.info > div > .graphs').hide()
                    clone.find('.info > div > .mapping').show()
                    break;

                case 'split':
                    clone.find('.info > div > .graphs > .chart-combined').hide()
                    let cpuChartCtx = clone.find('.info .graphs > .chart-cpu > canvas')[0].getContext('2d');
                    let memChartCtx = clone.find('.info .graphs > .chart-mem > canvas')[0].getContext('2d');
                    let cpuChart = makeChart(cpuChartCtx, [cpuDataset])
                    let memChart = makeChart(memChartCtx, [memDataset])
                    charts.push(cpuChart, memChart)
                    break;

                case 'combined':
                    clone.find('.info > div > .graphs > .chart-cpu').hide()
                    clone.find('.info > div > .graphs > .chart-mem').hide()
                    let combinedChartCtx = clone.find('.info .graphs > .chart-combined > canvas')[0].getContext('2d');
                    let combinedChart = makeChart(combinedChartCtx, [cpuDataset, memDataset])
                    charts.push(combinedChart)
                    break;
            }

            // charts
            function makeChart(ctx, datasets) {
                let chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: datasets
                    },
                    options: {
                        plugins: {
                            streaming: {
                                frameRate: 1
                            }
                        },
                        maintainAspectRatio: false,
                        scales: {
                            xAxes: [{
                                type: 'realtime',
                                realtime: {
                                    duration: 300000,    // data in the past 20000 ms will be displayed
                                    refresh: 5000,      // onRefresh callback will be called every 1000 ms
                                    delay: 500,        // delay of 1000 ms, so upcoming values are known before plotting a line
                                    pause: false,       // chart is not paused
                                    ttl: undefined,     // data will be automatically deleted as it disappears off the chart
                                    onRefresh: function(chart) {
                                        chart.data.datasets.forEach(function(dataset) {
                                            if (dataset['label'] === 'CPU') {
                                                let usage = parseFloat($(`#${id}`).parent().parent().parent().find('.advanced > span:first-child').text())
                                                dataset.data.push({
                                                    x: Date.now(),
                                                    y: usage.toFixed(2)
                                                });
                                            } else {
                                                let memory = getMemUsage($(`#${id}`).parent().parent().parent())
                                                let usage = memory['load'] / formatToBytes(memory['max']) * 100
                                                dataset.data.push({
                                                    x: Date.now(),
                                                    y: usage.toFixed(2)
                                                });
                                            }
                                        });
                                    }
                                },
                                time: {
                                    tooltipFormat:'dd MMM, yyyy, HH:mm:ss',
                                    displayFormats: {
                                        millisecond: 'H:mm:ss.SSS',
                                        second: 'H:mm:ss',
                                        minute: 'H:mm',
                                        hour: 'H',
                                        day: 'MMM D',
                                        week: 'll',
                                        month: 'MMM YYYY',
                                        quarter: '[Q]Q - YYYY',
                                        year: 'YYYY'
                                    },
                                },
                                ticks: {
                                    fontSize: 8
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    min: 0,
                                    fontSize: 8
                                }
                            }]
                        }
                    }
                });
                return chart
            }

            $(`.docker-preview-id-${id}`).tooltipster({
                interactive: true,
                theme: ['tooltipster-docker-folder'],
                content: clone,
                trigger: folders[folderName]['docker_preview_advanced_context_menu_activation_mode'],
                zIndex: 90000,
                functionBefore: function() {
                    for (const chart of charts) {
                        chart.options.plugins.streaming.frameRate = 30
                        chart.update();
                    }
                },
                functionAfter: function() {
                    for (const chart of charts) {
                        chart.options.plugins.streaming.frameRate = 1
                        chart.update();
                    }
                }
            });
        }
    }
}

$('<input/>', {
    type: 'button',
    onclick: 'addFolder()',
    value: 'Add Folder',
    style: 'display:none'
}).insertBefore("div.content > input:first-of-type");

function addFolder() {
  var path = location.pathname;
  var x = path.indexOf('?');
  if (x!=-1) path = path.substring(0,x);
  location = path+'/AddFolder';
}

</script>