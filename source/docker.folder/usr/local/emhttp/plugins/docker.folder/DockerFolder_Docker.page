Menu="Docker"
Icon="server"
---
<?php
require_once("/usr/local/emhttp/plugins/docker.folder/include/loadlist_edit.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/common.php");
require_once("/usr/local/emhttp/plugins/docker.folder/include/eventControl_edit.php");
?>

<style type="text/css">
    :root {
    --border-color: #c4c4c4;
    }
    [class*="docker-folder-child-"] > td{
        padding-left: 30px !important;
    }
    .docker-folder-child {
        display:none;
    }
    .expanded_right {
        float: right;
        transform: translate(-12px, 5px);
        color: #7c7c7c;
        border: solid;
        border-width: 1px;
        border-radius: 5px;
        padding: 5px;
    }
    [class*="docker-folder-child-div-"] > tr:first-child{
        border-top: 1px solid var(--border-color);
    }
    [class*="docker-folder-child-div-"] > tr{
        border-bottom: 1px solid var(--border-color);
    }

    .label-tab > .ct-name > div > .outer > .inner{
        padding-top: 6px;
    }
    .label-tab > .ct-name, .dockerPreview {
        padding: 4px !important;
    }
    .label-tab > .ct-name > div {
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
        box-shadow: -10px 0 0px -2px #91c8f0 inset;
    }
    .label-tab > .ct-name > div > .outer > .hand img {
        height: 42px;
        width: 42px;
        border-right: solid;
        border-width: 1px;
        border-color: var(--border-color);
        padding: 2px;
        margin-right: 6px;
    }
    .label-tab .expanded_right {
        transform: translate(-15px, 10px);
    }

    .dockerPreview-no-icon-container {
        display: grid;
        grid-template-columns: max-content repeat(6, max-content );
        color: #626262;
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
        margin-block-start: initial;
        margin-block-end: initial;
        margin-inline-start: initial;
        margin-inline-end: initial;
        padding-inline-start: initial;
        list-style-position: inside;
        padding-top: 6px;
        padding-bottom: 6px;
        box-shadow: 10px 0 0px -2px #beddf5 inset;
    }
    .dockerPreview-no-icon-container > div {
        padding-left: 10px;
        white-space: nowrap;
        overflow: hidden;
    }
    .dockerPreview-no-icon-container > .header {
        font-size: 14px;
        font-weight: bold;
        grid-area: 1 / 1 / span 2 / span 1;
        border-right: solid;
        border-width: 1px;
        border-color: var(--border-color);
        padding-right: 15px;
        padding-top: 12px;
        margin-top: -6px;
        margin-bottom: -6px;
    }
    .dockerPreview-no-icon-container li {
        padding-left: 4px;
    }
    .dockerPreview-no-icon-container > li > span {
        position: relative;
        left: -10px;
    }
    /* chrome/firefox issue with bullet points */
    @media screen and (min--moz-device-pixel-ratio:0) {
        .dockerPreview-no-icon-container > li > span {
            left: -5px;
        }
    }

    .dockerPreview-icon-container {
        border-style: solid;
        border-color: var(--border-color);
        border-width: 1px;
        border-radius: 5px;
        box-shadow: 10px 0 0px -2px #beddf5 inset;
    }
    .dockerPreview-icon-container img.img {
        margin-right: 6px;
    }
    .dockerPreview-icon-container td {
        width: auto;
        padding-top: 2px;
        padding-bottom: 2px;
        padding-right: 4px !important;
        border-right: 1px solid #b9b7b7;
        white-space: nowrap;
    }
    .dockerPreview-icon-container td:not(:first-child) {
        padding-left: 4px;
    }
    .dockerPreview-icon-container td:last-child {
        border-right: 0px;
    }
    .dockerPreview-icon-container img.img {
        white-space: nowrap;
        overflow: hidden;
        filter: grayscale(100%);
        opacity: 0.9;
    }
</style>

<script>

(async () => {
    folders = await read_folders()
    $( "<tbody id='docker_list_storage' style='display:none;'></tbody>" ).insertAfter( "#docker_list" );
    activeDropdowns = [];
})();

async function apply_folder(callback) {
    waitForGlobal("folders", async function() {
        let folderNames = Object.keys(await folders)
        folderChildren = []
        
        for (const folderName of folderNames) {
            edit_folder_base(folderName)
            edit_folder_extra(folderName)
            autoStartFolder(folderName)
            dockerPreview(folderName)
        }
        callback()
    });
}

function edit_folder_extra(folderName) {

    // advanced view fix
    if (!$('input.advancedview').prop('checked')) {
        $(`.docker-folder-parent-${folderName}`).children('td.advanced').hide()
    }

    // add show children button
    if ($(`.docker-folder-parent-${folderName}`).find('.outer > i').length == 0) {

        switch (folders[folderName]['docker_expanded_style']) {
            case 'bottom':
                $(`.docker-folder-parent-${folderName}`).find('.outer').append(`<br><i class="fa fa-fw fa-chevron-up expanded_bottom""></i>`)
                break;

            case 'right':
                $(`.docker-folder-parent-${folderName}`).find('.outer').append(`<i class="fa fa-fw fa-chevron-up expanded_right""></i>`)
                break;
        }

        $(`.docker-folder-parent-${folderName}`).find('.outer > i').click(function() {
            childrenDropdown(folderName)
        });
    }

    // docker_start_expanded - activeDropdowns
    if (folders[folderName]['docker_start_expanded'] == true && !activeDropdowns.includes(folderName)) {
        activeDropdowns.push(folderName)
    }

    // wrap children in table
    $(`.docker-folder-child-${folderName}`).wrapAll(`<div class='docker-folder-child-div-${folderName}'></div>`)

    // remove sortable from children and add new sortable
    // adjust child width (done to counter padding)
    $(`.docker-folder-child-${folderName}`).each(function() {
        $(this).removeClass("sortable").addClass(`sortable-child-${folderName}`)
        $(this).children('.ct-name').css({
            'width': '190'
        })
    })

    // custom sortable helper for children
    var sortableHelper2 = function(e,i){
        i.children().each(function(){
            $(this).width($(this).width());
        });
        return $(i).clone();
    };

    // make children sortable
    $(`.docker-folder-child-div-${folderName}`).sortable({helper:sortableHelper2,appendTo: document.body,cursor:'move',axis:'y',containment:'parent',cancel:'span.docker_readmore,input',delay:100,opacity:0.5,zIndex:9999,
    update:function(e,ui){
        var children = []
        $(`.docker-folder-child-div-${folderName} > tr`).each(function() {
            var nam = $(this).find('.appname').text();
            children.push(nam)
        })
        folders[folderName]['children'] = children
        loadlistUpdate(e,ui)
    }})

    // open dropdown on loadlist
    for (const dropdown of activeDropdowns) {
        if (dropdown == folderName) {
            docker_toggle_visibility(folderName)
            $(`.docker-folder-parent-${folderName}`).find('.outer > i').toggleClass('fa-chevron-down fa-chevron-up')
            childrenMove(folderName)
        }
    }

    // folder update status
    var upToDate = true
    for (const child of folders[folderName]['children']) {
        waitForGlobal("docker", function() {
            for (const dock of docker) {
                if (child == dock['name']) {
                    if (dock['update'] == 1) {
                        upToDate = false
                    }
                }
            }
        })
    }
    if (upToDate == true) {
        var updateConf = `<span class="green-text" style="white-space:nowrap;"><i class="fa fa-check fa-fw"></i> up-to-date</span>`
    } else {
        var updateConf = `<span class="orange-text" style="white-space:nowrap;"><i class="fa fa-flash fa-fw"></i> update ready</span>`
    }
    $(`.docker-folder-parent-${folderName}`).find('td.updatecolumn').html(updateConf)

    // icon style
    iconStyle(folderName)

    // cpu / memory load 
    cpuMemoryLoad(folderName)
}

function childrenDropdown(folderName) {
    docker_toggle_visibility(folderName)
    $(`.docker-folder-parent-${folderName}`).find('.outer > i').toggleClass('fa-chevron-down fa-chevron-up')
    
    if ($(`.docker-folder-parent-${folderName}`).find('.outer > i').hasClass('fa-chevron-up')) {
        $(`.docker-folder-child-div-${folderName}`).each(function() {
            $(this).appendTo("#docker_list_storage")
        });
        // remove folderName from activeDropdowns
        activeDropdowns = activeDropdowns.filter(function(elm) {
            return elm != folderName
        })
    } else {
        childrenMove(folderName)
        // add folderName to activeDropdowns
        activeDropdowns.push(folderName)
    }
}

function childrenMove(folderName) {
    $(`.docker-folder-child-div-${folderName}`).insertAfter(`.docker-folder-parent-${folderName}`)
}

function cpuMemoryLoad(folderName) {
    var cpuLoad = 0.00
    var memoryLoad = 0.00
    var memoryMax = 0.00

    if ($('input.advancedview').prop('checked')) {
        $(`.docker-folder-child-${folderName}`).each(function() {
            cpuLoad += parseFloat($(this).find("td.advanced > [class*='cpu-']").text().replace(/\%/g, ""))
            let memory = $(this).find("td.advanced > [class*='mem-']").text().match(/(\d*\.?\d*(?:\w+))/g)

            if (parseInt(memory[1]) > 0) {
                memoryMax = memory[1]
                memoryLoad += formatToBytes(memory[0])
            }
        });

        $(`.docker-folder-parent-${folderName}`).find('td.advanced > .cpu').text(cpuLoad.toFixed(2) + '%')
        $(`.docker-folder-parent-${folderName}`).find('td.advanced > .usage-disk > #cpu').css('width', `${cpuLoad.toFixed(2)}%`)
        $(`.docker-folder-parent-${folderName}`).find('td.advanced > .mem').text(`${formatBytes(memoryLoad)} / ${memoryMax}`)
    }
    
    setTimeout(cpuMemoryLoad.bind(null, folderName), 2000);
}

function formatToBytes(mem) {
    const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
    const match = /(\d*\.?.+\d+)(\w+)/g.exec(mem) || []
    let num = parseFloat(match[1])
    const size = match[2]

    num *= (1024**sizes.indexOf(size))

    return num
}

function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0';

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + '' + sizes[i];
}

function autoStartFolder(folderName) {
    // set the init state for folder autostart
    if (checkFolderSwitch()) {
        var initState = 'checked'
    }

    // adds switches
    $(`.docker-folder-parent-${folderName}`).find('td:nth-last-child(2)').html(
        `<input type="checkbox" class="docker-folder-autostart" folder="${folderName}" ${initState}>`
    ).find('input').switchButton({
        labels_placement: "right"
    });

    // event: clicks all the children so they match parent
    $(`.docker-folder-parent-${folderName}`).find('input.docker-folder-autostart').change(function() {
        clickChild($(this).prop('checked'))
    });
    

    function clickChild(state) {
        $(`.docker-folder-child-${folderName}`).find('input.autostart').each(function() {
            if (state !== $(this).prop('checked')) {
                $(this).parent().find('div.switch-button-background').trigger('click')
            }
        })
    }

    // returns true if any child has autostart checked
    function checkFolderSwitch() {
        var initStateArray = []
        $(`.docker-folder-child-${folderName}`).find('input.autostart').each(function() {
            initStateArray.push($(this).prop('checked'))
        })
        
        return initStateArray.some( (val, i, arr) => val === true)
    }


}

function dockerPreview(folderName) {
    const dockerPreview = $(`.docker-folder-parent-${folderName} > .dockerPreview`)

    switch (folders[folderName]['docker_preview']) {
        case 'no-icon':
            dockerPreview.append(`<ul class="dockerPreview-no-icon-container"><div class="header">Dockers:</div></ul>`)
            $(`.docker-folder-child-div-${folderName}`).children().each(function(i) {
                if (i < 12) {
                    let child = $(this).find('.appname').text()
                    let id = $(this).find('.hand').attr('id')

                    let row = ((2+i) % 2 == 0) ? 1 : 2
                    dockerPreview.find('.dockerPreview-no-icon-container').append(`<li class="docker-preview-id-${id}"><span>${child}</span></li>`)
                    dockerPreview.find('.dockerPreview-no-icon-container > li:last-of-type').css('grid-area', `${row}`)

                    // add context menu
                    dockerPreview.find(`.dockerPreview-no-icon-container > li.docker-preview-id-${id}`).click(function(e) {
                        showContextMenu(e, id)
                    })
                }
            })
            break;

        case 'icon':
            dockerPreview.append(`<div class="dockerPreview-icon-container"></div>`)
            var dockerPreviewWidth = dockerPreview.width()
            var widthTotal = 0
            $(`.docker-folder-child-div-${folderName}`).children().each(function() {
                if (widthTotal < dockerPreviewWidth) {
                    let clone = $(this).children('.ct-name').clone(true).removeAttr('style class').appendTo(dockerPreview.children('.dockerPreview-icon-container'))
                        clone.children('.advanced').remove()
                    let width = clone.width()
                    widthTotal += width
                }
            })
            break;
    }
}

function iconStyle(folderName) {
    switch (folders[folderName]['docker_icon_style']) {
        case 'label-tab':
            // blue text / bigger text size
            $(`.docker-folder-parent-${folderName}`).find('.appname').addClass('blue-text').css({
                'font-size': 'larger',
                'font-weight': 'bold'
            })

            $(`.docker-folder-parent-${folderName}`).addClass('label-tab')
            break;
    }
}

$('<input/>', {
    type: 'button',
    onclick: 'addFolder()',
    value: 'Add Folder',
    style: 'display:none'
}).insertBefore("div.content > input:first-of-type");

function addFolder() {
  var path = location.pathname;
  var x = path.indexOf('?');
  if (x!=-1) path = path.substring(0,x);
  location = path+'/AddFolder';
}

</script>